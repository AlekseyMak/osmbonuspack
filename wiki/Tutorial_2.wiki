#summary BonusPack Tutorial #2: POI and custom bubbles.

(we assume you already followed [Tutorial_1])

= 5. OpenStreetMap POIs with Nominatim =
"Points Of Interest" (POIs in short) are a very common need in map applications. 

Example: I would like to see where are the cinemas (or restaurants, or hotels, or fuel stations, or whatever...) close to my position. 
OpenStreetMap contains a lot of POIs, and Nominatim service allows to search for them. 

As for road nodes, in the onCreate() method of the activity, we add an itemized overlay: 
{{{
final ArrayList<ExtendedOverlayItem> poiItems = new ArrayList<ExtendedOverlayItem>();
poiMarkers = new ItemizedOverlayWithBubble<ExtendedOverlayItem>(this, 
				poiItems, map);
map.getOverlays().add(poiMarkers);
}}}

Now, we instantiate a Nominatim POI Provider and do the request:

{{{
NominatimPOIProvider poiProvider = new NominatimPOIProvider();
ArrayList<POI> pois = poiProvider.getPOICloseTo(startPoint, "cinema", 50, 0.1);
}}}

Nominatim searches in OpenStreetMap features using specific keywords: the "Special Phrases" ([http://wiki.openstreetmap.org/wiki/Nominatim/Special_Phrases]). 
Take care that, either because some features are rarely described in OSM, or because of Nominatim itself, there are keywords that return few or no results. 
You can refer to  [http://code.google.com/p/osmbonuspack/source/browse/trunk/OSMBonusPackDemo/res/values/poi_tags.xml] to get a sub-list of features that are really - really - available through Nominatim. 

Now, we build the POI markers, and put them in the overlay:

{{{
for (POI poi:pois){
		ExtendedOverlayItem poiMarker = new ExtendedOverlayItem(
					poi.mType, poi.mDescription, 
					poi.mLocation, map.getContext());
		Drawable marker = getResources().getDrawable(R.drawable.marker_poi_default);
		poiMarker.setMarker(marker);
		poiMarker.setMarkerHotspot(OverlayItem.HotspotPlace.CENTER);
		if (poi.mIcon != null){
			poiMarker.setImage(new BitmapDrawable(poi.mIcon));
		}
		poiMarkers.addItem(poiMarker);
}
}}}

Okay, you can test it. Clicking on a POI marker will open its bubble and display the cinema name and address. 

Nominatim also allows to search POIs along a route. 
So, using the road you built in [Tutorial_1], you can also get your POIs this way:
{{{
ArrayList<POI> pois = poiProvider.getPOIAlong(road.getRouteLow(), "fuel", 50, 2.0);
}}}

Note the call to road.getRouteLow(), which provides a reduced version of the road path. This is better for everybody: for URL length, for workload on Nominatim servers, and for responsiveness. 

= 6. Wikipedia POIs with GeoNames =

There is a POI Provider based on GeoNames service, which is able to get Wikipedia entries close to a position, or inside a bounding box. 

This is cool, but to use it you MUST 1) create a GeoNames account, and 2) activate the free services on it. 
You can do that from here: [http://www.geonames.org/login]

Once your account is activated, just change the poiProvider calls this way:
{{{
GeoNamesPOIProvider poiProvider = new GeoNamesPOIProvider("YOUR_GEONAMES_ACCOUNT");
BoundingBoxE6 bb = map.getBoundingBox();
ArrayList<POI> pois = poiProvider.getPOIInside(bb, 75);
}}}

And you can test!


= 7. Customizing the bubble behaviour =
Wikipedia POIs usually contain a URL to the Wikipedia page. 
We would like to access this page from the POI bubble. 

We will do that by customizing the bubble, adding a "more info" button which will open a web view on the Wikipedia URL. 

Ready? Let's go! 

First, create a new class CustomInfoWindow which inherits from DefaultInfoWindow, with its constructor. 
{{{
public class CustomInfoWindow extends DefaultInfoWindow {
	public CustomInfoWindow(MapView mapView) {
		super(R.layout.bonuspack_bubble, mapView);
	}
}
}}}

In the constructor, get the "more info" button:
{{{
Button btn = (Button)(mView.findViewById(R.id.bubble_moreinfo));
}}}

In fact, our default bubble layouts already have a hidden "more info" button, so here we just have to get it. But of course you are free to define your own layout, and put as many buttons you want, with the look&feel you want. We will see how to do that in chapter 9. 

For now, set a listener doing something on this button:
{{{
btn.setOnClickListener(new View.OnClickListener() {
	public void onClick(View v) {
		Toast.makeText(v.getContext(), "Button clicked", Toast.LENGTH_LONG).show();
	}
});
}}}

If needed, you can override the onOpen and onClose methods. 
onOpen is called when tapping an item, just before showing the bubble. 
In our case, as our "more info" button is hidden in our layout, we show it:
{{{
@Override public void onOpen(ExtendedOverlayItem item){
	super.onOpen(item);
	mView.findViewById(R.id.bubble_moreinfo).setVisibility(View.VISIBLE);
}
}}}

The CustomInfoWindow class is ready, we can use it. 
In your activity, search where the ItemizedOverlayWithBubble was created:
{{{
ItemizedOverlayWithBubble<ExtendedOverlayItem> poiMarkers = 
  new ItemizedOverlayWithBubble<ExtendedOverlayItem>(this, 
    roadItems, map);
}}}
and give it a customized bubble: 
{{{
ItemizedOverlayWithBubble<ExtendedOverlayItem> poiMarkers = 
  new ItemizedOverlayWithBubble<ExtendedOverlayItem>(this, 
    poiItems, map, 
    new CustomInfoWindow(map));
}}}

OK, ready, you can test it. 

The next step is to open an activity on the POI, instead of a stupid Toast. 
For that, we would like to access POI information in the CustomInfoWindow. 
There is a simple solution: each time you create a POI item, give it a reference to the corresponding POI object: 
{{{
poiMarker.setRelatedObject(poi);
}}}

Define "POI selectedPoi" as a member of your CustomInfoWindow. 
Then, in CustomInfoWindow.open(item), you can access to the reference and update the selectedPoi: 
{{{
selectedPoi = (POI)item.getRelatedObject();
}}}

selectedPoi.mUrl contains the Wikipedia URL. 
Now, you can modify the button listener to open a web view on this URL. 
For instance this way:
{{{
btn.setOnClickListener(new View.OnClickListener() {
	public void onClick(View view) {
		if (selectedPoi.mUrl != null){
			Intent myIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(selectedPoi.mUrl));
			view.getContext().startActivity(myIntent);
		}
	}
});
}}}

= 8. Quick overview of the Flickr and Picasa POIs =
There is a POI provider for retrieving geolocalized Flickr photos, and another one for Picasa photos. 
The API are very similar to GeoNamesPOIProvider. 
Let's start with Flickr. 
First, you will need to obtain your own API key from Flickr - this is easy. 

Then just change the poiProvider calls this way:

{{{
FlickrPOIProvider poiProvider = new FlickrPOIProvider("YOUR_FLICKR_API_KEY");
BoundingBoxE6 bb = map.getBoundingBox();
ArrayList<POI> pois = poiProvider.getPOIInside(bb, 20);
}}}

And test!

You should have the markers, a "more info" button to go to the Flickr page, but no thumbnail... This is sad. 
This is because we cannot load all thumbnails at once: this would take too long for the user. So the idea is to postpone thumbnail loading when the user opens the bubble. 

Open again your CustomInfoWindow.onOpen method. 

Retrieve the thumbNail of the current POI:
{{{
Bitmap thumbnail = selectedPOI.getThumbnail();
}}}

Then, put the thumbnail in the item, if not already done:
{{{
if (thumbnail != null && item.getImage() == null){
	item.setImage(new BitmapDrawable(thumbnail));
}
}}}

Much better, isn't it? 

= 9. Creating your own bubble layout =
Two standard layouts are provided and can be found in OSMBonusPackDemo/res/layout directory: 
 * bonuspack_bubble.xml, which is the default layout
 * bonuspack_bubble_black.xml

You can build and use your own bubble layouts, but some components are mandatory if you want to use them with a DefaultInfoWindow: 
 * a TextView with id: bubble_title
 * a TextView with id: bubble_description
 * a TextView with id: bubble_subdescription
 * an ImageView with id: bubble_image
Take care to respect the exact spelling of these ids. 
If you don't need these components, each one can be in status hidden or gone. 


= Conclusion =
Well, "That's all Folks!"

If you want to go further, have a look on OSMBonusPackDemo/OSMNavigator source code, and on the javadoc. You will discover some useful stuff like MapEventsOverlay/MapEventsReceiver, GeocoderNominatim, the KML toolbox, Parcelable objects, and more... 