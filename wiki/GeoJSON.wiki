#summary GeoJSON handling in OSMBonusPack.

<wiki:toc max_depth="2" />

= Introduction =
_GeoJSON saving is available. GeoJSON loading is on its way and will be available from v4.2.9. _

In OSMBonusPack, support for GeoJSON is done through KML objects. 

We assume the reader understand both the [http://geojson.org/geojson-spec.html GeoJSON concepts] and the [https://developers.google.com/kml/documentation/kmlreference KML concepts]. 

= Mapping between GeoJSON types and KML classes =

The table below shows the mapping in both ways between GeoJSON types and KML classes:

|| *GeoJSON type* || *OSMBonusPack KML class* ||
|| FeatureCollection || KmlFolder ||
|| Feature || KmlPlacemark ||
|| Point || KmlPoint ||
|| LineString || KmlLineString ||
|| Polygon || KmlPolygon ||

At loading, other GeoJSON types will be ignored. 
At saving, other KML classes will be ignored. 

If your KmlFolder contains recursively other KmlFolder, the resulting GeoJSON FeatureCollection will contain other FeatureCollection. This could be invalid, as (surprisingly) GeoJSON spec doesn't support multiple levels of FeatureCollection. 

= GeoJSON properties, KML attributes and KML ExtendedData =

KML Placemark "id" attribute is handled (at loading and saving) as GeoJSON Feature "id". 

KML Placemark "name" attribute is handled (at loading and saving) as the GeoJSON Feature property "name". 

Exemple: 
{{{
{ "type": "Feature",
  "id": "NYC",
  "geometry": {"type": "Point", "coordinates": [102.0, 0.5]},
  "properties": {"name": "New-York City"}
}
}}}

All other GeoJSON properties are loaded as ExtendedData (assuming their key and value can be loaded as String). 

All KML Placemark ExtendedData are saved as GeoJSON Feature properties. 

KML ExtendedData of other classes are not saved in GeoJSON. 

And other KML attributes, like description or style information, are not saved in GeoJSON. 

= Coordinates reference system =
Only WGS84 is supported. All longitude and latitude values are assumed to be in decimal degrees. 