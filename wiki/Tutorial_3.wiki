#summary BonusPack Tutorial #3: KML content.

(we assume you already followed [Tutorial_1] and [Tutorial_2])

= 10. Using KML content =

[http://en.wikipedia.org/wiki/Keyhole_Markup_Language KML] is a de-facto standard for handling overlays on maps, from a simple list of markers, to complex structures. 

Both Google Maps and Bing Maps allow people to create their "personal maps" by putting markers, lines and polygons. Such personal maps can be exported as KML content. 
More advanced tools can be used to create and display KML content, like Google Earth or ArcGIS Explorer. 

OSMBonusPack provides the basic toolbox to handle KML content. 

Let see it in action. I have a Url to a KML file, and I want to show it on my OSM map. 

(Parenthesis - If you don't have such Url, pick one of those:
 * Paris Tour: http://mapsengine.google.com/map/kml?mid=z6IJfj90QEd4.kUUY9FoHFRdE
 * A route in Netherlands: http://www.yournavigation.org/api/1.0/gosmore.php?format=kml&flat=52.215676&flon=5.963946&tlat=52.2573&tlon=6.1799
End of parenthesis)

First of all, you need a KmlProvider: 
{{{
KmlProvider kmlProvider = new KmlProvider();
}}}

Then you can use it to read and parse your KML content:
{{{
KmlObject kmlRoot = kmlProvider.parse(url);
}}}

The whole KML structure is now contained in this kmlRoot. Don't hesitate to have a look at KmlObject class to understand its logic. It's quite simple, and you will need to understand it if you want to go further and manipulate your KML structure. 

But for now, we mainly wish to see the graphics on the screen. 
So, set a default marker icon for all points:
{{{
Drawable defaultMarker = getResources().getDrawable(R.drawable.marker_kml_point);
}}}

And build the overlays:
{{{
FolderOverlay kmlOverlay = (FolderOverlay)kmlRoot.buildOverlays(this, map, defaultMarker, kmlProvider, false);
}}}

Yes, this is doing the job. This FolderOverlay will be the container for all overlays that will be found in the KML structure: 
 * KML Point, handled as an OSMBonusPack ItemizedOverlayWithBubble
 * KML LineString, handled as osmdroid PathOverlay
 * KML Polygon, handled as OSMBonusPack Polygon
 * and KML Folder, handled as OSMBonusPack FolderOverlay, allowing to keep the hierarchical structure of the KML structure. 

Now, add this folder overlay on the map: 
{{{
map.getOverlays().add(kmlOverlay);
}}}

And don't forget to redraw your map view:
{{{
map.invalidate();
}}}

Now give this a try. 

You see nothing? Try to move your map at the right place. Or set automatically the view on the whole stuff:
{{{
map.zoomToBoundingBox(kmlRoot.mBB);
}}}

= Conclusion =
Well, "That's all Folks!"

If you want to go further, have a look on OSMBonusPackDemo/OSMNavigator source code, and on the javadoc. You will discover some useful stuff like *MapEventsOverlay*/*MapEventsReceiver*, *GeocoderNominatim*, *Polygon* overlay, Parcelable objects, and more... 