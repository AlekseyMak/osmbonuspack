#summary BonusPack Tutorial #3: KML content.

(we assume you already followed [Tutorial_1] and [Tutorial_2])

= 10. Marker Clustering =

Marker Clustering is a now classical technique when you have a lot of markers on a map, to group markers which are close together in a single "cluster" marker, displaying the number of markers it "contains". 

This (cool) feature is available in OSMBonusPack with MarkerClusterer. 

If you already grouped your markers in a FolderOverlay (as we did in chapter 5 with poiMarkers), introducing marker clustering is trivial. 
You replace the FolderOverlay by a MarkerClusterer: 
{{{
MarkerClusterer poiMarkers = new MarkerClusterer(this);
}}}

You also have to set an icon for the clusters. This is the icon to be used when there are many markers in a cluster. 
As this icon must be a Bitmap, here is the usual way to get a Bitmap from a Drawable resource: 
{{{
Drawable clusterIconD = getResources().getDrawable(R.drawable.marker_cluster);
Bitmap clusterIcon = ((BitmapDrawable)clusterIconD).getBitmap();
}}}

Then you can set this icon to clusters:
{{{
poiMarkers.setIcon(clusterIcon);
}}}

The rest of the code: adding the poiMarkers to map overlays, and adding markers to poiMarkers, has already been done in chapter 5, and need no change. 

So you can give it a try. 
If you zoom in, each individual marker appears. When you zoom out, they are grouped and displayed with the cluster icon. Fine, isn't it?


= 11. Loading KML content =

[http://en.wikipedia.org/wiki/Keyhole_Markup_Language KML] is a de-facto standard for handling overlays on maps, from a simple list of markers, to complex structures. 

Both Google Maps and Bing Maps allow people to create their "personal maps" by putting markers, lines and polygons. Such personal maps can be exported as KML content. 
More advanced tools can be used to create and display KML content, like Google Earth or ArcGIS Explorer. 

OSMBonusPack provides the basic toolbox to handle KML content: read (from a url or a local file), save locally, and edit. 

Let see it in action. I have a Url to a KML file, and I want to show it on my OSM map. 

(Parenthesis - If you don't have such Url, pick one of those:
 * Paris Tour: http://mapsengine.google.com/map/kml?mid=z6IJfj90QEd4.kUUY9FoHFRdE
 * A route in Netherlands: http://www.yournavigation.org/api/1.0/gosmore.php?format=kml&flat=52.215676&flon=5.963946&tlat=52.2573&tlon=6.1799
 * Or a message in the desert: http://mapsengine.google.com/map/kml?mid=z6IJfj90QEd4.kcfEKhi8r5LQ
End of parenthesis)

First of all, you need a KmlDocument: 
{{{
KmlDocument kmlDocument = new KmlDocument();
}}}

Then you can use it to read and parse your KML content:
{{{
kmlDocument.parseUrl(url);
}}}

This KmlDocument now contains the whole KML Document. 
In particular, it contains a KmlFeature: kmlRoot, which is the entry point to the KML hierarchy. 
Don't hesitate to have a look at [http://code.google.com/p/osmbonuspack/source/browse/trunk/OSMBonusPack/src/org/osmdroid/bonuspack/kml/KmlFeature.java KmlFeature] class to understand its logic. It's quite simple, and you will need to understand it if you want to go further and manipulate your KML structure. 

But for now, we mainly wish to see the graphics on the screen. 
So, set a default marker icon for all points:
{{{
Drawable defaultMarker = getResources().getDrawable(R.drawable.marker_kml_point);
}}}

And build the overlays:
{{{
FolderOverlay kmlOverlay = (FolderOverlay)kmlDocument.kmlRoot.buildOverlays(this, map, defaultMarker, kmlDocument, false);
}}}

Yes, this is doing the job. This FolderOverlay will be the container for all overlays that will be found in the KML structure: 
 * KML Point, handled as an OSMBonusPack Marker
 * KML LineString, handled as OSMBonusPack Polyline
 * KML Polygon, handled as OSMBonusPack Polygon
 * and KML Folder, handled as OSMBonusPack FolderOverlay, allowing to keep the hierarchical structure of the KML structure. 

Now, add this folder overlay on the map: 
{{{
map.getOverlays().add(kmlOverlay);
}}}

And don't forget to redraw your map view:
{{{
map.invalidate();
}}}

Now give this a try. 

You see nothing? Try to move your map at the right place. Or set automatically the view on the whole stuff, using the bounding box which is maintained up-to-date:
{{{
map.zoomToBoundingBox(kmlDocument.kmlRoot.mBB);
}}}

= 12. Grab overlays in KML structure, save KML locally =
You can "grab" an overlay and add it in an existing KML folder. 
For example, we can grab the route shape overlay we built in chapter 1: 
{{{
kmlDocument.kmlRoot.addOverlay(roadOverlay, kmlDocument);
}}}

This is working for Polyline overlays, but also for Markers, and for FolderOverlays. If you put your road node markers in a roadNodes FolderOverlay (as we did for POI Markers in chapter 5), you can grab all of them once:
{{{
kmlDocument.kmlRoot.addOverlay(roadNodes, kmlDocument);
}}}

And we can save the final result locally, in a KML file:
{{{
File localFile = kmlDocument.getDefaultPathForAndroid("my_route.kml");
kmlDocument.saveAsKML(localFile);
}}}

The default path for KML files is in the external storage, in a "kml" directory. 
Now, you have a "my_route.kml" file, containing the whole KML content loaded from a url in chapter 10, plus the route shape and route nodes of chapter 1. 

= Conclusion =
Well, "That's all Folks!"

If you want to go further, have a look on OSMBonusPackDemo/OSMNavigator source code, and on the javadoc. You will discover some useful stuff like *MapEventsOverlay*/*MapEventsReceiver*, *GeocoderNominatim*, *Polygon* overlay, Parcelable objects, and more... 