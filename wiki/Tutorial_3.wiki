#summary BonusPack Tutorial #3: Marker Clustering.

(we assume you already followed [Tutorial_1] and [Tutorial_2])

= 10. Marker Clustering =

Marker Clustering is a now classical technique when you have a lot of markers on a map, to group markers which are close together in a single "cluster" marker, displaying the number of markers it "contains". 

This (cool) feature is available in OSMBonusPack with the GridMarkerClusterer. 

If you already grouped your markers in a FolderOverlay (as we did in chapter 5 with poiMarkers), introducing marker clustering is trivial. 
You replace the FolderOverlay by a GridMarkerClusterer: 
{{{
GridMarkerClusterer poiMarkers = new GridMarkerClusterer(this);
}}}

You also have to set an icon for the clusters. This is the icon to be used when there are many markers in a cluster. 
As this icon must be a Bitmap, here is the usual way to get a Bitmap from a Drawable resource: 
{{{
Drawable clusterIconD = getResources().getDrawable(R.drawable.marker_cluster);
Bitmap clusterIcon = ((BitmapDrawable)clusterIconD).getBitmap();
}}}

Then you can set this icon to clusters:
{{{
poiMarkers.setIcon(clusterIcon);
}}}

The rest of the code: adding the poiMarkers to map overlays, and adding markers to poiMarkers, has already been done in chapter 5, and need no change. 

So you can give it a try. 

The result when searching for "bakery" with NominatimPOIProvider:

<img src="http://osmbonuspack.googlecode.com/svn/BonusPackDownloads/tuto_clustering.png" height="530">

If you zoom in, each individual marker appears. When you zoom out, they are grouped and displayed with the cluster icon. Fine, isn't it?

= 11. Customizing the clusters design - and beyond =

To customize the design of clusters, the first level is to use the available getters, setters and public attributes. 

Example:
{{{
poiMarkers.getTextPaint().setTextSize(10.0f);
poiMarkers.getTextPaint().setColor(Color.DKGRAY);
poiMarkers.mTextAnchorU = 0.75f;
poiMarkers.mTextAnchorV = 0.25f;
}}}

The second level is to sub-class either the MarkerClusterer abstract class, or the GridMarkerClusterer, depending on how much you need. 
Then you override #buildClusterMarker(StaticCluster cluster, MapView mapView) method. 


If you want to go further, you can also implement your own clustering algorithm. You "just" have to sub-class the MarkerClusterer, and override the #clusterer(MapView mapView) method. 


Next step: in [Tutorial_4], you will learn how to use the KML and GeoJSON toolbox. 