#summary Why this "OSMBonusPack", and what does it give.

osmdroid is an opensource library which provides a simple and efficient way to port an Android application from Google Maps to OpenStreetMap. osmdroid provides:
  * the map tiles (MapView) and the usual zoom/pan tools (MapController)
  * the standard overlays (ItemizedOverlay, MyLocationOverlay,...)
  * and some additional overlays (MinimapOverlay, PathOverlay,...)

However, nowadays, for modern map-based applications, we want more!
So, here comes OSMBonusPack. 


= Routes and Directions = 
Probably the most desired feature. 
OSMBonusPack provides a set of classes to get routes, with turn-by-turn information and route shape:

RoadManagers retrieve roads from a variety of service providers. Currently supported: 
  * *MapQuestRoadManager* using [http://open.mapquestapi.com/guidance/ MapQuest Open Guidance] service
  * and *OSRMRoadManager*, using [http://project-osrm.org/ OSRM] service. 

Result is a *Road* object, containing: 
  * the road shape, as a list of GeoPoint => RoadManager can build an osmdroid PathOverlay from this road shape, ready-to-display. 
  * turn-by-turn information, as a list of RoadNode

Also provided, very useful route-related utilities: 
  * *PolylineEncoder*, a polyline encoder/decoder
  * *DouglasPeuckerReducer*, a polyline reducer based on Douglas-Peucker algorithm. 


= Overlays with cartoon-bubble =
The *InfoWindow* class is a view that can be displayed on an osmdroid map, associated to a GeoPoint. 
Typical usage is to have cartoon-like bubble displayed when clicking an overlay item. 
The API mimics the [https://developers.google.com/maps/documentation/javascript/reference#InfoWindow InfoWindow] class of Google Maps JavaScript API V3. 

Two standard bubble layouts are provided in the demo application, each one with its NinePatch background. Contributors are strongly encouraged to provide some nice alternatives... 

*ItemizedOverlayWithBubble* is an overlay that will open an InfoWindow bubble when the user taps on an item. ItemizedOverlayWithBubble can easily replace (and enhance) the ItemizedOverlayWithFocus of osmdroid. 

= POIs =
OSMBonusPack gives a set of classes to get Points Of Interest (POIs).

POIProviders retrieve POI from a variety of service providers. 
Currently supported: 
 * *NominatimPOIProvider*, to retrieve OpenStreetMap "features"
 * *GeoNamesPOIProvider*, using [http://www.geonames.org/export/wikipedia-webservice.html GeoNames Wikipedia] service, retrieving Wikipedia geolocalized entries
 * *FlickrPOIProvider* and *PicasaPOIProvider*, using Flickr and Picasa services to search among the billions of Flickr and Picasa photos and retrieve geolocalized photos for an area. 

Result is a list of *POI* objects containing the position of the POI, and POI information. 

= Geocoding and Reverse Geocoding =
Android provides the [http://developer.android.com/reference/android/location/Geocoder.html Geocoder] class. BUT... according to Google Maps APIs Terms of Service, it can only be used in relation with a Google map. 
(see https://developers.google.com/maps/terms, item (g): No Use of Content without a Google Map)

If you are using osmdroid, you are probably not displaying a Google map. 

So, OSMBonusPack provides *GeocoderNominatim* class, which accesses to a Nominatim service: 
 * either the standard OpenStreetMap [http://wiki.openstreetmap.org/wiki/Nominatim Nominatim] service
 * or the Nominatim service hosted by [http://developer.mapquest.com/web/products/open/nominatim/ MapQuest]
 * or any other Nominatim-compliant service (your own installation for example). 
Migrating from Android Geocoder is a simple change of class name. 

WARNING - WARNING - WARNING : The relevance of Nominatim service is far behind Google Geocoding service. Results are sometimes quite surprising, and there is absolutely no support for any kind of misspelling: missing letter, "street" used instead of "avenue", etc. 

Take that aspect into account before providing a real-life service. 

= Map events handling = 
*MapEventsOverlay* and *MapEventsReceiver* classes provide a simple way to handle single-press and long-press events somewhere on the map. 

Example: long-press on the map to define the destination, a new POI,... 

= Additional Overlays =
*FolderOverlay* is a container for other overlays. It can contain any Overlay object - including other FolderOverlays, so it is perfect for managing easily hierarchical structures of overlays. 

*PolygonOverlay* is a robust implementation for polygons - something lacking in osmdroid. 

= KML support =
*KmlProvider* allows to read and parse KML content, to create related overlays. It makes heavy use of FolderOverlay to keep KML structure. 

= Next steps = 
 * See HowToInclude the lib in your project
 * Follow the [Tutorial_1 Tutorials]
 * Look at (or checkout) [http://code.google.com/p/osmbonuspack/source/browse/ OSMBonusPackDemo source] to see how to use these classes in common use cases
 * Download the javadoc to get detailed information on the API. 