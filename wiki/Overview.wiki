#summary Why this Bonus Pack, and what does it give.

OSMDroid provides an simple and efficient way to move an application from Google Maps to OpenStreetMap. OSMDroid provides:
  * the map tiles (MapView) and the usual zoom/pan tools (MapController)
  * the standard overlays (ItemizedOverlay, MyLocationOverlay,...)
  * and some additional overlays (MinimapOverlay, PathOverlay,...)

However, in most map-based applications, we want more!
So, here comes OSMDroid Bonus Pack. 

= Geocoding and Reverse Geocoding =
Android provides the [http://developer.android.com/reference/android/location/Geocoder.html Geocoder] class. BUT... according to Google Maps APIs Terms of Service, it can only be used in relation with a Google map. 
(see https://developers.google.com/maps/terms, item (g): No Use of Content without a Google Map)

So, OSMDroid Bonus Pack provides GeocoderNominatim class, which accesses to Nominatim service: 
 * OSM Nominatim
 * MapQuest Nominatim
 * or any other Nominatim-compliant service. 
Migrating from Android Geocoder is a simple change of class name. 

= Routes and Directions = 
OSMDroid Bonus Pack provides a set of classes to get routes, with turn-by-turn information and route shape:
 * RoadManagers retrieve roads from a variety of services providers. Currently supported: 
  * MapQuest Open API 
  * and OSRM. 

 * Result is a "Road" object, containing: 
  * road shape, as a list of GeoPoint => RoadManager can build an osmdroid PathOverlay from this road shape, ready-to-display. 
  * turn-by-turn information, as a list of RoadNode
 * Also provided, some route-related utilities: 
  * a polyline encoder/decoder
  * a polyline reducer based on Douglas-Peucker algorithm. 


= Cartoon-bubble Overlays =
OSMDroid Bonus Pack provides the InfoWindow class. This is a view that can be displayed on an OSMDroid map, associated to a GeoPoint. 
Typical usage is to have cartoon-like bubble displayed when clicking an overlay item. 
The API mimics the [https://developers.google.com/maps/documentation/javascript/reference#InfoWindow InfoWindow] class of Google Maps JavaScript API V3. 

A NinePatch background and a standard layout are provided in the demo application. Contributors are encouraged to provide some nice alternatives. 


= Map events handling = 
MapEventsOverlay and MapEventsReceiver classes provide a simple way to manage single-press and long-press events somewhere on the map. 

Example: long-press on the map to define the destination, a new POI,... 

= Next steps = 
 * See HowToInclude the lib in your project
 * Do the [Tutorial_1]
 * Look at (or checkout) [http://code.google.com/p/osmbonuspack/source/browse/ OSMBonusPackDemo source] to see how to use these classes in common use cases
 * Download the javadoc to have more detailed information. 