#summary BonusPack Tutorial #1: routing, bubbles.

= Introduction =
Let's assume you have a super-simple Android application using osmdroid, and displaying a map in an activity. Typically, that:

{{{
public class MapActivity extends Activity {

    @Override public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);        
        MapView map = (MapView) findViewById(R.id.map);
        map.setTileSource(TileSourceFactory.MAPNIK);
        GeoPoint startPoint = new GeoPoint(48.13, -1.63);
        IMapController mapController = map.getController();
        mapController.setCenter(startPoint);
	mapController.setZoom(9);
    }
}
}}}

And you want to display a route on your map. 

= Important note =
For clarity and simplicity, in these tutorials, we do all API calls in the main thread. 

Normally, for network calls, this is not recommended at all: we should use threads and asynchronous tasks. 
Even worst, since Honeycomb SDK (3.0), it is not allowed to make a network call in the main thread (thanks to the "StrictMode.ThreadPolicy" default settings, a NetworkOnMainThreadException exception will be raised). 

So:
 # For these tutorials, target an SDK earlier than 3.0
 # Once you have played with the tutos and want to work on your real app, have a look at the OSMBonusPackDemo source code, where network calls are done in async tasks. 


= 1. "Hello, Routing World!" =

First, get a road manager:
{{{
	RoadManager roadManager = new OSRMRoadManager();
}}}

Then, retreive the road between your start and end point:

{{{
	ArrayList<GeoPoint> waypoints = new ArrayList<GeoPoint>();
	waypoints.add(startPoint);
	waypoints.add(new GeoPoint(48.4, -1.9)); //end point
	Road road = roadManager.getRoad(waypoints);
}}}

then, build an overlay with the route shape:
{{{
	PathOverlay roadOverlay = RoadManager.buildRoadOverlay(road, map.getContext());
}}}

Add this overlay to the overlays of your map:
{{{
	map.getOverlays().add(roadOverlay);
}}}
Okay, now refresh the map:
{{{
	map.invalidate();
}}}

= 2. Playing with the RoadManager =

- Okay, but I wanted this route for bicycles... 

- First, change to MapQuestRoadManager, as it supports bicycle routes. One word to change, not too complicated:
{{{
	RoadManager roadManager = new MapQuestRoadManager();
}}}
Then set appropriate option (before getting the road):
{{{
	roadManager.addRequestOption("routeType=bicycle");
}}}
(all MapQuest options are described here: http://open.mapquestapi.com/guidance/)

Done. 

= 3. Showing the Route steps on the map =

I'm sure you will soon want to add nice bubbles on these steps. So, let's use our ItemizedOverlayWithBubble. First, put all the resources needed for the standard bubble: 
 * in your res/layout: bonuspack_bubble.xml
 * in res/drawable-mpi: 
  * bonuspack_bubble.9.png
  * moreinfo_arrow.png
  * moreinfo_arrow_pressed.png
 * in res/drawable: btn_moreinfo.xml
You will find all of them in OSMBonusPackDemo res directory. 

Then, we can create the overlay and put it on the map:
{{{
final ArrayList<ExtendedOverlayItem> roadItems = 
  new ArrayList<ExtendedOverlayItem>();
ItemizedOverlayWithBubble<ExtendedOverlayItem> roadNodes = 
  new ItemizedOverlayWithBubble<ExtendedOverlayItem>(this, roadItems, map);
map.getOverlays().add(roadNodes);
}}}

Once the road has been retrieved, populate the roadNodes overlay:

{{{
    	Drawable marker = getResources().getDrawable(R.drawable.marker_node);
    	for (int i=0; i<road.mNodes.size(); i++){
    		RoadNode node = road.mNodes.get(i);
    		ExtendedOverlayItem nodeMarker = new ExtendedOverlayItem("Step "+i, "", node.mLocation, this);
    		nodeMarker.setMarkerHotspot(OverlayItem.HotspotPlace.CENTER);
    		nodeMarker.setMarker(marker);
    		roadNodes.addItem(nodeMarker);
    	}
}}}

You don't have a marker_node? Shame on you. Pick the OSMBonusPackDemo one (res/drawable-nodpi/marker_node.png). 

Here we are! Clicking on a step marker will open its bubble. 

- Hey, guy, this bubble is nice, but useless!

- You are right. So, go to step 4. 

= 4. Filling the bubbles =

Set the bubble description with the instructions:
{{{
nodeMarker.setDescription(node.mInstructions);
}}}

Set the bubble sub-description with the length and duration of the step:
{{{
nodeMarker.setSubDescription(road.getLengthDurationText(node.mLength, node.mDuration));
}}}

And put an icon showing the maneuver at this step:
{{{
Drawable icon = getResources().getDrawable(R.drawable.icon_continue);
nodeMarker.setImage(icon);
}}}

Yes, you are right, it's not the right icon!

The maneuver id is in node.mManeuverType. 
The possible maneuver ids are [http://open.mapquestapi.com/guidance/#maneuvertypes here]. And the maneuver icons are in OSMBonusPackDemo res/drawable-mpi. 
It's boring, so I'm going downstair to take a coffee, while you handle those icons properly. 

And see you again on [Tutorial_2]. 