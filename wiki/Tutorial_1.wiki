#summary BonusPack Tutorial #1: routing, bubbles.

Note: final sources of these tutorials can be found in the OSMBonusPackTuto project. 

= Introduction =
Let's assume you have a super-simple Android application using osmdroid, and displaying a map in an activity. Typically, that:

{{{
public class MainActivity extends Activity {

    @Override public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        MapView map = (MapView) findViewById(R.id.map);
        map.setTileSource(TileSourceFactory.MAPNIK);
	map.setBuiltInZoomControls(true);
	map.setMultiTouchControls(true);

        GeoPoint startPoint = new GeoPoint(48.13, -1.63);
        IMapController mapController = map.getController();
	mapController.setZoom(9);
        mapController.setCenter(startPoint);
    }
}
}}}

And you want to display a route on your map. 

= Important note =
For clarity and simplicity, in these tutorials, we do all API calls in the main thread. 

Normally, for network calls, this is not recommended at all: we should use threads and asynchronous tasks. 
Even worst, since Honeycomb SDK (3.0), it is not allowed to make a network call in the main thread (thanks to the "StrictMode.ThreadPolicy" default settings, a NetworkOnMainThreadException exception will be raised). 

So:
 # For these tutorials, target an SDK earlier than 3.0
 # Once you have played with the tutos and want to work on your real app, have a look at the OSMBonusPackDemo source code, where network calls are done in async tasks. 


= 0. Using the Marker overlay =
As we will make a large usage of Marker overlays, let's have a quick presentation. 

First of all, you MUST put in your project res directory all resources needed for the default InfoWindow or "bubble": 
 * in your res/layout: bonuspack_bubble.xml
 * in res/drawable-mpi: 
  * bonuspack_bubble.9.png
  * moreinfo_arrow.png
  * moreinfo_arrow_pressed.png
 * in res/drawable: btn_moreinfo.xml
You will find all those resources in OSMBonusPackDemo res directory. 

Now, back to the code. We create a Marker, we screw it at the start point, we set its anchor at bottom-center, and we add this Marker to the map's overlays. 
{{{
Marker startMarker = new Marker(map);
startMarker.setPosition(startPoint);
startMarker.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM);
map.getOverlays().add(startMarker);
}}}
(Marker.ANCHOR_CENTER and Marker.ANCHOR_BOTTOM are just readable synonyms for 0.5 and 1.0)

And we refresh the map. Yes, we will not repeat it everytime, but in order to see your changes, you need to refresh the map - this way:
{{{
map.invalidate();
}}}

Give it a try. You should see the default osmdroid marker icon. 

Now we can improve a little bit, changing the icon, setting a title to be shown in the InfoWindow when clicking on the marker:
{{{
startMarker.setIcon(getResources().getDrawable(R.drawable.ic_launcher));
startMarker.setTitle("Start point");
}}}

- And then? 

- Refresh the map!

- Okay, you got it. So now, let's start with really new stuff. 

= 1. "Hello, Routing World!" =

First, get a road manager:
{{{
RoadManager roadManager = new OSRMRoadManager();
}}}

Then, retreive the road between your start and end point:

{{{
ArrayList<GeoPoint> waypoints = new ArrayList<GeoPoint>();
waypoints.add(startPoint);
waypoints.add(new GeoPoint(48.4, -1.9)); //end point
Road road = roadManager.getRoad(waypoints);
}}}

then, build a Polyline with the route shape:
{{{
Polyline roadOverlay = RoadManager.buildRoadOverlay(road, this);
}}}

Add this Polyline to the overlays of your map:
{{{
map.getOverlays().add(roadOverlay);
}}}

And then? Refresh the map!
{{{
map.invalidate();
}}}

= 2. Playing with the RoadManager =

- Okay, but I wanted this route for bicycles... 

- First, change to MapQuestRoadManager, as it supports bicycle routes. Bad news, MapQuest service now requires this API key, so you will also have to register at http://developer.mapquest.com, and set-up an API key. 

Then, in the code, just few changes, not too complicated:
{{{
RoadManager roadManager = new MapQuestRoadManager("YOUR MAPQUEST API KEY");
}}}

Then set appropriate option (before getting the road):
{{{
roadManager.addRequestOption("routeType=bicycle");
}}}
(all MapQuest options are described here: http://open.mapquestapi.com/guidance/)

Done. 

= 3. Showing the Route steps on the map =

At each road node, we put a Marker. Straightforward:

{{{
Drawable nodeIcon = getResources().getDrawable(R.drawable.marker_node);
for (int i=0; i<road.mNodes.size(); i++){
	RoadNode node = road.mNodes.get(i);
	Marker nodeMarker = new Marker(map);
	nodeMarker.setPosition(node.mLocation);
	nodeMarker.setIcon(nodeIcon);
	nodeMarker.setTitle("Step "+i);
	map.getOverlays().add(nodeMarker);
}}}

You don't have a marker_node icon? Shame on you. Pick the OSMBonusPackDemo one (res/drawable-nodpi/marker_node.png). 

Here we are! Clicking on a step marker will open its bubble. 

- Hey, guy, those bubbles are nice, but useless!

- You are right. So, go to step 4. 

= 4. Filling the bubbles =

Set the bubble snippet with the instructions:
{{{
nodeMarker.setSnippet(node.mInstructions);
}}}

Set the bubble sub-description with the length and duration of the step:
{{{
nodeMarker.setSubDescription(Road.getLengthDurationText(node.mLength, node.mDuration));
}}}

And put an icon showing the maneuver at this step:
{{{
Drawable icon = getResources().getDrawable(R.drawable.ic_continue);
nodeMarker.setImage(icon);
}}}

Yes, you are right, it's not the right icon!

The maneuver id is in node.mManeuverType. 
The possible maneuver ids are [http://open.mapquestapi.com/guidance/#maneuvertypes here]. And the maneuver icons are in OSMBonusPackDemo res/drawable-mpi. 
It's boring, so I'm going downstair to take a coffee, while you handle those icons properly. 

And see you again on [Tutorial_2]. 

<img src="http://osmbonuspack.googlecode.com/svn/BonusPackDownloads/tuto_routing.png" height="530">